Tomando def(x) = True para toda x variable o constante,

1.a.
def(a + 1) ≡ True
1.b.
def(a/b) ≡ (b != 0)
1.c.
def(sqrt(a/b)) ≡ ((b != 0) ^L (a/b >= 0))
1.d.
def(A[i] + 1) ≡ (0 <= i < |A|)
1.e.
def(A[i+2]) ≡ (0 <= i+2 < |A|)
1.f.
def((0 <= i <= |A|) ^L (A[i] >= 0)) ≡ (i != |A|)

2.a.
{wp(a := a+1, Q2)} ≡ {def(a + 1) ^L a + 1 >= 0} ≡ {Q3} ≡ {a >= -1}
a := a+1
{wp(b := a/2, Q1)} ≡ {def(a/2) ^L a/2 >= 0} ≡ {True ^L a/2 >= 0} ≡ {Q2} ≡ {a >= 0} 
b := a/2
{Q1} ≡ {b >= 0}
2.b.
wp(a := A[i] + 1, Q2) ≡ {Q3} ≡ {(0 <= i < |A|) ^L ((A[i] != sqrt(2)) - 1 ^ (A[i] != -sqrt(2) - 1))} 
a := A[i] + 1
wp(b := a*a, Q1) ≡ {Q2} ≡ {a*a != 2} ≡ {|a| != sqrt(2)} ≡ {a != sqrt(2) ^ a != -sqrt(2)}
b := a*a
{Q1} ≡ {b != 2}
2.c.
wp(a := A[i] + 1, Q2) ≡ {Q3} ≡ {(0 <= i < |A|) ^L (b != 0)}
a := A[i] + 1
wp(a := b*b, Q1) ≡ {b*b >= 0} ≡ {Q2} ≡ {b != 0}
a := b*b
{Q1} ≡ {a >= 0}
2.d.
wp(a := a - b, Q2) ≡ {(a - b >= 0) ^ (a - b + b >= 0)} ≡ {Q3} ≡ {(a >= 0) ^ (a >= b)}
a := a - b
wp(b := a + b, Q1) ≡ {Q2} ≡ {(a >= 0) ^ (a + b >= 0)}
b := a + b
{Q1} ≡ {a >= 0 ^ b >= 0}

3.a.
wp(A[i] := 0, Q) ≡ wp(A := setAt(A,i,0), Q) ≡
{(0 <= i < |A|) ^L (∀j: Z)((0 < j < |setAt(A,i,0)|) =>L (setAt(A,i,0)[j] >= 0))} ≡
{(0 <= i < |A|) ^L (∀j: Z)(((0 < j < |A|) ^ (j != i)) =>L (A[j] >= 0))}

3.b.
wp(A[i+2] := 0, Q) ≡ wp(A := setAt(A,i+2,0), Q) ≡
{(-2 <= i < |A|-2) ^L (∀j: Z)((0 < j < |setAt(A,i+2,0)|) =>L (setAt(A,i+2,0)[j] >= 0))} ≡
{(-2 <= i < |A|-2) ^L (∀j: Z)(((0 < j < |A|) ^ (j != i+2)) =>L (A[j] >= 0))}

3.c.
wp(A[i+2] := -1, Q) ≡ wp(A := setAt(A,i+2,-1), Q) ≡ {False}

3.d.
wp(A[i] := 2*A[i], Q) ≡ wp(A := setAt(A,i,2*A[i]), Q) ≡
{(0 <= i < |A|) ^L (∀j: Z)((0 < j < |setAt(A,i,2*A[i])|) =>L (setAt(A,i,2*A[i])[j] >= 0))} ≡
{(0 <= i < |A|) ^L (∀j: Z)((0 < j < |A|) =>L (A[j] >= 0))}

3.e.
wp(A[i] := A[i-1], Q) ≡ wp(A := setAt(A,i,A[i-1]), Q) ≡
{(1 <= i < |A|) ^L (∀j: Z)((0 < j < |setAt(A,i,A[i-1])|) =>L (setAt(A,i,A[i-1])[j] >= 0))} ≡
{(1 <= i < |A|) ^L (∀j: Z)(((0 < j < |A|) ^ (j != i)) =>L (A[j] >= 0))}

4.a.
wp(b := a, Q) ≡ {a = -|a|} ≡ {a <= 0}
wp(b := -a, Q) ≡ {-a = -|a|} ≡ {a >= 0}
wp(S, Q) ≡ {def(a < 0) ^L (((a < 0) ^ wp(b := a, Q)) v ((a >= 0) ^ wp(b := -a, Q)))} ≡
{((a < 0) ^ wp(b := a, Q)) v ((a >= 0) ^ wp(b := -a, Q))} ≡
{((a < 0) ^ (a <= 0)) v ((a >= 0) ^ (a >= 0))} ≡
{(a < 0) v (a >= 0)} ≡
{True}

4.b.
wp(b := a, Q) ≡ {a = |a|} ≡ {a >= 0}
wp(b := -a, Q) ≡ {-a = |a|} ≡ {a <= 0}
wp(S, Q) ≡ {def(a < 0) ^L (((a < 0) ^ wp(b := a, Q)) v ((a >= 0) ^ wp(b := -a, Q)))} ≡
{((a < 0) ^ (a >= 0)) v ((a >= 0) ^ (a <= 0))} ≡
{False v (a = 0)} ≡
{a = 0}

4.c.
wp(s[i] := 0, Q) ≡ wp(s := setAt(s,i,0), Q) ≡
{(0 <= i < |s|) ^L (∀j: Z)((0 <= j < |setAt(s,i,0)|) =>L (setAt(s,i,0)[j] >= 0))} ≡
{(0 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] >= 0))}
wp(s[0] := 0, Q) ≡ wp(s := setAt(s,0,0), Q) ≡
{(0 < |s|) ^L (∀j: Z)((0 <= j < |setAt(s,0,0)|) =>L (setAt(s,0,0)[j] >= 0))} ≡
{(0 < |s|) ^L (∀j: Z)((1 <= j < |s|) =>L (s[j] >= 0))} ≡
{(∀j: Z)((1 <= j < |s|) =>L (s[j] >= 0))}
wp(S, Q) ≡ {def(i > 0) ^L (((i > 0) ^ ((0 <= i < |s|) ^L (∀j: Z)(((0 <= j < |A|) ^ (j != i)) =>L (s[j] >= 0)))) v ((i <= 0) ^ (∀j: Z)((1 <= j < |s|) =>L (s[j] >= 0))))} ≡
{(((1 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] >= 0))) v ((i <= 0) ^ (∀j: Z)((1 <= j < |s|) =>L (s[j] >= 0))))} /* muy largo */ /* preguntar */

4.d.
wp(s[i] := s[i-1], Q) ≡ wp(s := setAt(s,i,s[i-1]), Q) ≡
{(1 <= i < |s|) ^L (∀j: Z)((0 <= j < |setAt(s,i,s[i-1]|) =>L (setAt(s,i,s[i-1])[j] = setAt(s,i,s[i-1])[j-1]))} ≡
{(1 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] = s[i-1]))}
wp(s[i] := 0, Q) ≡ wp(s := setAt(s,i,0), Q) ≡
{(0 <= i < |s|) ^L (∀j: Z)((0 <= j < |setAt(s,i,0)|) =>L (setAt(s,i,0)[j] = setAt(s,i,0)[j-1]))} ≡
{(0 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] = 0))}
wp(S, Q) ≡ {def(i > 1) ^L (((i > 1) ^ ((1 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] = s[i-1])))) v ((i <= 1) ^ ((0 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] = 0)))))} ≡
{((2 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] = s[i-1]))) v ((0 <= i < 2) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] = 0)))} /* muy largo */ /* preguntar */

4.e.
wp(s[i] := -s[i], Q) ≡ wp(s := setAt(s,i,-s[i]), Q) ≡
{(0 <= i < |s|) ^L (0 <= i < |setAt(s,i,-s[i]|) ^L (setAt(s,i,-s[i])[i] >= 0)} ≡
{(0 <= i < |s|) ^L (0 <= i < |s|) ^L (s[i] <= 0)} ≡
{(0 <= i < |s|) ^L (s[i] <= 0)}
wp(skip, Q) ≡ {Q}
wp(S, Q) ≡ {def(s[i] < 0) ^L (((s[i] < 0) ^ ((0 <= i < |s|) ^L (s[i] <= 0))) v ((s[i] >= 0) ^ ((0 <= i < |s|) ^L (s[i] >= 0))))} ≡
{(0 <= i < |s|) ^L (((s[i] < 0) ^ ((0 <= i < |s|) ^L (s[i] <= 0))) v ((s[i] >= 0) ^ ((0 <= i < |s|) ^L (s[i] >= 0))))} ≡
{(0 <= i < |s|) ^L (((s[i] < 0) ^ (s[i] <= 0)) v ((s[i] >= 0) ^ (s[i] >= 0)))} ≡
{(0 <= i < |s|) ^L ((s[i] < 0) v (s[i] >= 0))} ≡
{(0 <= i < |s|) ^L True)} ≡
{0 <= i < |s|}

4.f.
wp(s[i] := -s[i], Q) ≡ wp(s := setAt(s,i,-s[i]), Q) ≡
{(0 <= i < |s|) ^L (∀j: Z)((0 <= j < |setAt(s,i,-s[i])|) =>L (setAt(s,i,-s[i])[j] >= 0))} ≡
{(0 <= i < |s|) ^L (∀j: Z)((0 <= j < |s|) =>L (setAt(s,i,-s[i])[j] >= 0))} ≡
{(0 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] >= 0)) ^ (s[i] <= 0)} ≡
wp(skip, Q) ≡ {Q}
wp(S, Q) ≡ {def(s[i] > 0) ^L (((s[i] > 0) ^ ((0 <= i < |s|) ^L (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] >= 0)) ^ (s[i] <= 0))) v ((s[i] <= 0) ^ ((∀j: Z)((0 <= j < |s|) =>L (s[j] >= 0)))))} ≡
{(0 <= i < |s|) ^L (((s[i] > 0) ^ (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] >= 0)) ^ (s[i] <= 0)) v ((s[i] <= 0) ^ (∀j: Z)((0 <= j < |s|) =>L (s[j] >= 0))))} ≡
{(0 <= i < |s|) ^L (False v ((s[i] <= 0) ^ (∀j: Z)((0 <= j < |s|) =>L (s[j] >= 0))))} ≡
{(0 <= i < |s|) ^L ((s[i] = 0) ^ (∀j: Z)(((0 <= j < |s|) ^ (j != i)) =>L (s[j] >= 0)))}

5.a.
int sumarElemento(int[] s, int i, int a) {
    a += s[i]; /* a := a + s[i] */ 
    return a;
}
S ≡ a := a + s[i]
wp(S, asegura) ≡ {(0 <= i < |s|) ^L (a + s[i] = Σ(j=0;i)(s[j]))} ≡
{(0 <= i < |s|) ^L (a = Σ(j=0;i)(s[j]) - s[i])} ≡
{(0 <= i < |s|) ^L (a = Σ(j=0;i-1)(s[j]))} 
requiere => wp(S, asegura) ≡ requiere => requiere ≡ True
El programa es correcto, pues wp(S, asegura) es exactamente el requiere del enunciado.

5.b.
int restarPrimero(int[] s, int a) { /* int i innecesario */
    a -= s[0]; /* a := a - s[0] */ 
    return a;
}
S ≡ a := a - s[0]
wp(S, asegura) ≡ {(0 < |s|) ^L (a - s[0] = Σ(j=1;i)(s[j]))} ≡
{(0 < |s|) ^L (a = Σ(j=1;i)(s[j]) + s[0])} ≡
{(0 < |s|) ^L (a = Σ(j=0;i)(s[j]))}
requiere => wp(S, asegura) ≡ ((0 <= i < |s|) ^L (a = Σ(j=0;i)(s[j]))) => ((0 < |s|) ^L (a = Σ(j=0;i)(s[j]))) ≡ True
El programa es correcto, pues el requiere del enunciado implica a la wp(S, asegura) encontrada.

5.c.
boolean elementoNoNegativo(int[] s, int i) {
    res = s[i] >= 0; /* res := s[i] >= 0 */
    return res; 
}
S ≡ res := s[i] >= 0
wp(S, asegura) ≡ {(0 <= i < |s|) ^L ((s[i] >= 0) <=> (∀j: Z)((0 <= j <= i) =>L (s[j] >= 0)))} ≡
{(0 <= i < |s|) ^L (∀j: Z)((0 <= j < i) =>L (s[j] >= 0))}
requiere => wp(S, asegura) ≡ requiere => requiere ≡ True
El programa es correcto, pues wp(S, asegura) es exactamente el requiere del enunciado.

5.d.
int incrementarSiElementoNoNulo(int[] s, int i, int a) {
    if (s[i] != 0) {
        a += 1; /* a := a + 1 */
    } /* else {skip} */
    return a;
}
S ≡
if (s[i] != 0)
    a := a + 1
else
    skip
endif
wp(S, asegura) ≡ {def(s[i] != 0) ^L (((s[i] != 0) ^ (a + 1 = Σ(j=0;i)(Beta(s[j] != 0)))) v ((s[i] = 0) ^ (asegura)))} ≡
{(0 <= i < |s|) ^L (((s[i] != 0) ^ (a = Σ(j=0;i)(Beta(s[j] != 0)) - 1)) v ((s[i] = 0) ^ (a = Σ(j=0;i)(Beta(s[j] != 0)))))} ≡
{(0 <= i < |s|) ^L (((s[i] != 0) ^ (a = Σ(j=0;i-1)(Beta(s[j] != 0)))) v ((s[i] = 0) ^ (a = Σ(j=0;i-1)(Beta(s[j] != 0)))))} ≡
{(0 <= i < |s|) ^L (a = Σ(j=0;i-1)(Beta(s[j] != 0)))}
requiere => wp(S, asegura) ≡ requiere => requiere ≡ True
El programa es correcto, pues wp(S, asegura) es exactamente el requiere del enunciado.

5.e.
int incrementarSiPrimeroNoNulo(int[] s, int a) { /* int i innecesario */
    if (s[0] != 0) {
        a += 1; /* a := a + 1 */
    } /* else {skip} */
    return a;
}
S ≡
if (s[0] != 0)
    a := a + 1
else
    skip
endif
wp(S, asegura) ≡ {def(s[0] != 0) ^L (0 <= i < |s|) ^L (((s[0] != 0) ^ (a + 1 = Σ(j=0;i-1)(Beta(s[j] != 0)))) v ((s[0] = 0) ^ (asegura)))} ≡
{(0 < |s|) ^L (((s[0] != 0) ^ (a + 1 = Σ(j=0;i-1)(Beta(s[j] != 0)))) v ((s[0] = 0) ^ (a = Σ(j=0;i-1)(Beta(s[j] != 0)))))} ≡
{(0 < |s|) ^L (((s[0] != 0) ^ (a = Σ(j=0;i-1)(Beta(s[j] != 0)) - 1)) v ((s[0] = 0) ^ (a = Σ(j=0;i-1)(Beta(s[j] != 0)))))} ≡
{(0 < |s|) ^L (((s[0] != 0) ^ (a = Σ(j=1;i-1)(Beta(s[j] != 0)))) v ((s[0] = 0) ^ (a = Σ(j=1;i-1)(Beta(s[j] != 0)))))} ≡
{(0 < |s|) ^L (a = Σ(j=1;i-1)(Beta(s[j] != 0)))}
requiere => wp(S, asegura) ≡ ((0 <= i < |s|) ^L (a = Σ(j=1;i-1)(Beta(s[j] != 0)))) => ((0 < |s|) ^L (a = Σ(j=1;i-1)(Beta(s[j] != 0)))) ≡ True
El programa es correcto, pues el requiere del enunciado implica a la wp(S, asegura) encontrada.
